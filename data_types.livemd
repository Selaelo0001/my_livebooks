# Data types

## Atom

```elixir
:error
{:error, reason} = {:error, "file not found"}
```

```elixir
{:error, reason} = {:error, "file not found"}
reason
```

```elixir
{:ok, msg} = {:ok, "status 200 ok"}
msg
```

## Strings

```elixir
name = "Mahlatse"
name
```

```elixir
is_binary(name)
```

```elixir
msg = "Hello " <> name
msg
```

```elixir
"Hello " <> name = msg
name
```

```elixir
<<head, rest::binary>> = name
head
```

```elixir
head == ?M
```

```elixir
<<"M", rest::binary>> = name
rest
```

```elixir
<<"Ma", rest::binary>> = name
rest
```

```elixir
<<head::binary-size(3), rest::binary>> = name
head
```

## CharList

```elixir
chars = 'Mahlatse'
```

```elixir
'Hello ' ++ chars
```

```elixir
is_list(chars)
```

## Processes

```elixir
my_pid = self()
my_pid
```

## Lists are not lists - they are linked lists

```elixir
list = ["a", "b", "c"]
```

```elixir
list[0]
```

```elixir
Enum.at(list, 0)
```

```elixir
[first, second, third] = list
third
```

```elixir
[_, _, third] = list
third
```

```elixir
hd(list)
```

```elixir
tl(list)
```

```elixir
[h | t] = list
h
```

## Tuple

```elixir
{a, b} = {1, 2}
a
```

```elixir
{:reply, msg, state} = {:reply, "Mahlatse found!", ["Mahlatse, lebo, tshepo"]}
state
```

## Keyword List

```elixir
data = [a: 1, b: 2]
```

```elixir
[{:a, 1}] = [a: 1]
```

```elixir
data[:a]
```

## Maps

```elixir
my_map = %{a: 1, b: 2, c: 3}
my_map
```

```elixir
%{a: first, b: second, c: third} = my_map
first
```

```elixir
%{b: second} = my_map
second
```

```elixir
my_map.a
```

```elixir
map2 = %{"a" => 1, "b" => 2, "c" => 4}
```

```elixir
%{"c" => c} = map2
c
```

```elixir
map2 = %{map2 | "c" => 5}
```

```elixir
my_map = %{my_map | c: 4}
```

## Struct

```elixir
defmodule User do
  defstruct username: "", email: "", age: nil
end
```

```elixir
user1 = %User{username: "Mahlatse", age: 15, email: "mahlatse@gmail.com"}
```

```elixir
%{username: username} = user1
username
```

```elixir
user1 = %{user1 | age: 22}
```
