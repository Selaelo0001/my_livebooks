# Flow Control

## Case

```elixir
list = [1, 2, 3]
```

```elixir
case Enum.at(list, 2) do
  1 -> "This won't print"
  3 -> "3 is a match"
  _ -> "Catch all"
end
```

```elixir
defmodule Post do
  defstruct(
    id: nil,
    title: "",
    description: "",
    author: ""
  )
end
```

```elixir
post1 = %Post{id: 1, title: "Title No 1", author: "Mahlatse Makgato"}
```

```elixir
case post1 do
  %{author: "unknown"} -> "Got this from unknown"
  %{author: "Steve"} -> "Got this from Steve"
  _ -> "Got this from #{post1.author}"
end
```

```elixir
post1 = %{post1 | author: "Selaelo Makgato"}
```

```elixir
case post1 do
  %{author: "unknown"} -> "Got this from unknown"
  %{author: "Steve"} -> "Got this from Steve"
  _ -> "Got this from #{post1.author}"
end
```

## Cond

```elixir
cond do
  post1.author == "Unknown" -> "editing post for unknown"
  post1.author == "Selaelo Makgato" -> "editing post for Selaelo Makgato"
  true -> "this is a catch all"
end
```

```elixir
cond do
  hd(list) == 1 -> "got a 1"
  true -> "head is #{hd(list)}"
end
```

## IF ELSE

```elixir
if true do
  "this will work"
else
  "this won't work"
end
```
